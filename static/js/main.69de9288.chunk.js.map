{"version":3,"sources":["map/Graph.js","map/GraphNode.js","map/GraphEdge.js","components/Circle.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["GraphNode","require","Edge","module","exports","this","calculateCost","sourceNode","targetNode","xDist","xPos","yDist","yPos","Math","sqrt","addEdge","cost","undefined","edges","push","createNode","node","nodes","connectNearbyNodes","costThreshold","length","forEach","consideredNode","findNode","x","y","find","populateGraph","isGrid","generateSeedMap","config","xInterval","floor","window","innerWidth","yInterval","innerHeight","offset","intervalLength","random","i","j","iDistributed","jDistributed","Circle","cx","cy","GraphData","Map","width","height","map","key","r","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69de9288.chunk.js","sourcesContent":["\"use strict\";\n\nconst GraphNode = require(\"./GraphNode\");\nconst Edge = require(\"./GraphEdge\");\n\n/**\n * Generates a graph map\n * @constructor\n * @classdesc A Graph of interconnected nodes\n */\nfunction Graph() {\n  /**\n   * Calculates the cost along the edge of a node\n   * @method\n   */\n  this.calculateCost = function(sourceNode, targetNode) {\n    let xDist = targetNode.xPos - sourceNode.xPos;\n    let yDist = targetNode.yPos - sourceNode.yPos;\n\n    return Math.sqrt(xDist * xDist + yDist * yDist);\n  };\n\n  /**\n   * Adds an edge between two nodes.\n   * @method\n   */\n  this.addEdge = function(sourceNode, targetNode, cost) {\n    // Figure out the cost if it wasn't passed into this function\n    if (cost == undefined) {\n      cost = this.calculateCost(sourceNode, targetNode);\n    }\n\n    //add the edge to the source node\n    sourceNode.edges.push(new Edge(targetNode, cost));\n  };\n\n  /**\n   * Adds a node to the graph\n   * @method\n   * @param {Number} xPos - The x-position of the node\n   * @param {Number} yPos - The y-position of the node.\n   * @returns {Node} - The node that was just added\n   * @todo Check for pre-existing node before adding another identical one\n   */\n  this.createNode = function(xPos, yPos) {\n    let node = new GraphNode(xPos, yPos);\n    this.nodes.push(node);\n    return node;\n  };\n\n  /**\n   * connects the nearby nodes together\n   * @method\n   * @param {Number} costThreshold - The maximum for which\n   * nodes will be connected\n   */\n  this.connectNearbyNodes = function(costThreshold) {\n    if (this.nodes.length > 0) {\n      for (let node of this.nodes) {\n        // create a list of nodes that are within or equal to the cost threshold\n        this.nodes.forEach(consideredNode => {\n          if (consideredNode !== node) {\n            let cost = this.calculateCost(node, consideredNode);\n            if (cost <= costThreshold) {\n              this.addEdge(node, consideredNode, cost);\n            }\n          }\n        });\n      }\n    }\n  };\n\n\n  /**\n   * finds a node based on the co-ords provided\n   * @param {Number} x - The x-position of the node\n   * @param {Number} y - The y-position of the node\n   * @returns {(Node|undefind)} - Node if exists\n   */\n  this.findNode = function(x, y, radius = 1) {\n    // find closest node based on area search of area defined by radius\n    // return this.nodes.filter(node => {\n    //   let xDist = x - node.xPos;\n    //   let yDist = y - node.yPos;\n    //   return Math.sqrt(xDist * xDist + yDist * yDist) <= radius;\n    // });\n\n    return this.nodes.find(node => {\n      return node.x == x && node.y == y;\n    });\n  };\n\n  /**\n   * @member {Array.<GraphNodes>} nodes - A list of nodes\n   */\n  this.nodes = [];\n\n  this.populateGraph = function(isGrid) {\n    if (isGrid) {\n\n    };\n  };\n\n  this.generateSeedMap = () => {\n    const config = {\n      iMax: 10,\n      jMax: 10\n    };\n\n    let xInterval = Math.floor(window.innerWidth / config.iMax);\n    let yInterval = Math.floor(window.innerHeight / config.jMax);\n\n    const offset = (intervalLength) => Math.random() * intervalLength;\n\n    for (let i = 1; i < config.iMax; i++) {\n      for (let j = 1; j < config.jMax; j++) {\n        let iDistributed = Math.floor((i * xInterval) + offset(xInterval) - offset(xInterval));\n        let jDistributed = Math.floor((j * xInterval) + offset(yInterval) - offset(yInterval));\n        // info.push({x: iDistributed, y: jDistributed});\n        this.createNode(iDistributed, jDistributed);\n      }\n    }\n\n    this.connectNearbyNodes(1000);\n  };\n};\n\nmodule.exports = Graph;\n","'use strict';\n\n/**\n * A Node in the graph\n * @constructor\n * @param {Number} xPos - The x-position of the Graph Node\n * @param {Number} yPos - The y-position of the Graph Node\n *\n * @property {Number} xPos - The x-position of the node\n * @property {Number} yPos - The y-position of the node\n * @property {Array.<Edge>} edges - A list of all the edges connected to this node\n */\nmodule.exports = function GraphNode(xPos, yPos) {\n  this.xPos = xPos;\n  this.yPos = yPos;\n  this.edges = [];\n}\n\n","'use strict';\n\n\n/**\n * An edge connecting two GraphNodes together\n * @constructor\n * @param {Node} sourceNode - the source node\n * @param {Node} targetNode - the target node\n * @prop {Node} sourceNode - the source node\n * @prop {Node} targetNode - the target node\n */\nmodule.exports = function GraphEdge(targetNode, cost) {\n  this.targetNode = targetNode;\n  this.cost = cost;\n};\n","import React from 'react';\n\nexport default function Circle() {\n  return (\n    <circle\n      cx={100}\n      cy={100}\n    >\n    </circle>\n  );\n};\n","import React from 'react';\nimport Circle from './Circle';\n\nconst Graph = require('../map/Graph');\nconst GraphData = new Graph();\n\nexport default function Map() {\n\n\n  return(\n    <svg width={window.innerWidth} height={window.innerHeight}>\n      {nodes}\n    </svg>\n  );\n};\n\nGraphData.generateSeedMap();\nlet nodes = GraphData.nodes.map((node, key) => {\n  return (<Circle \n    key={key}\n    cx={node.xPos}\n    cy={node.yPos}\n    r={\"50\"}\n    />)\n  });\n\n","import React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nfunction App() {\n  return (\n    <main>\n      <Map />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}