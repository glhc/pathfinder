{"version":3,"sources":["index.js"],"names":["gridData","data","rows","columns","width","window","innerWidth","height","console","table","xPos","yPos","row","push","column","x","y","gridDatastore","grid","d3","select","append","attr","innerHeight","selectAll","enter","d","style"],"mappings":"AAAA;AAEA;;;;AAGA,SAASA,QAAT,GAAoB;AAClB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,UAAP,GAAoBH,OAAhC;AACA,MAAII,MAAM,GAAGH,KAAb,CALkB,CAOlB;;AAEAI,EAAAA,OAAO,CAACC,KAAR,CAAc;AACZ,aAASL,KADG;AAEZ,gCAA4BA,KAAK,GAAGC,MAAM,CAACC;AAF/B,GAAd;AAKA,MAAII,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,OAAK,IAAIC,IAAG,GAAG,CAAf,EAAkBA,IAAG,GAAGV,IAAxB,EAA8BU,IAAG,EAAjC,EAAqC;AACnCX,IAAAA,IAAI,CAACY,IAAL,CAAU,EAAV;;AACA,SAAK,IAAIC,OAAM,GAAG,CAAlB,EAAqBA,OAAM,GAAGX,OAA9B,EAAuCW,OAAM,EAA7C,EAAiD;AAC/Cb,MAAAA,IAAI,CAACW,IAAD,CAAJ,CAAUC,IAAV,CAAe;AACbE,QAAAA,CAAC,EAAEL,IADU;AAEbM,QAAAA,CAAC,EAAEL,IAFU;AAGbJ,QAAAA,MAAM,EAAEA,MAHK;AAIbH,QAAAA,KAAK,EAAEA;AAJM,OAAf;;AAMAM,MAAAA,IAAI,IAAIN,KAAR;AACD;;AACDM,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,IAAI,IAAIJ,MAAR;AACD;;AACD,SAAON,IAAP;AACD;;AAED,IAAMgB,aAAa,GAAGjB,QAAQ,EAA9B;AAEA,IAAIkB,IAAI,GAAGC,EAAE,CACVC,MADQ,CACD,OADC,EAERC,MAFQ,CAED,KAFC,EAGRC,IAHQ,CAGH,OAHG,YAGSjB,MAAM,CAACC,UAHhB,SAIRgB,IAJQ,CAIH,QAJG,YAIUjB,MAAM,CAACkB,WAJjB,QAAX;AAMA,IAAIX,GAAG,GAAGM,IAAI,CACXM,SADO,CACG,MADH,EAEPvB,IAFO,CAEFgB,aAFE,EAGPQ,KAHO,GAIPJ,MAJO,CAIA,GAJA,EAKPC,IALO,CAKF,OALE,EAKO,KALP,CAAV;AAOA,IAAIR,MAAM,GAAGF,GAAG,CACbY,SADU,CACA,OADA,EAEVvB,IAFU,CAEL,UAAAyB,CAAC;AAAA,SAAIA,CAAJ;AAAA,CAFI,EAGVD,KAHU,GAIVJ,MAJU,CAIH,MAJG,EAKVC,IALU,CAKL,OALK,EAKI,MALJ,EAMVA,IANU,CAML,GANK,EAMA,UAAAI,CAAC;AAAA,SAAIA,CAAC,CAACX,CAAN;AAAA,CAND,EAOVO,IAPU,CAOL,GAPK,EAOA,UAAAI,CAAC;AAAA,SAAIA,CAAC,CAACV,CAAN;AAAA,CAPD,EAQVM,IARU,CAQL,QARK,EAQK,UAAAI,CAAC;AAAA,SAAIA,CAAC,CAACnB,MAAN;AAAA,CARN,EASVe,IATU,CASL,OATK,EASI,UAAAI,CAAC;AAAA,SAAIA,CAAC,CAACtB,KAAN;AAAA,CATL,EAUVuB,KAVU,CAUJ,QAVI,EAUM,OAVN,EAWVA,KAXU,CAWJ,MAXI,EAWI,OAXJ,CAAb","file":"temp-pathfinder.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\n/**\n * Generate a grid structure\n */\nfunction gridData() {\n  let data = [];\n  let rows = 32;\n  let columns = 32;\n  let width = window.innerWidth / columns;\n  let height = width;\n  \n  // TODO: get cell width to round up if theres leftover width\n\n  console.table({\n    \"width\": width,\n    \"total width / cell width\": width / window.innerWidth\n  });\n\n  let xPos = 0;\n  let yPos = 0;\n\n  for (let row = 0; row < rows; row++) {\n    data.push([]);\n    for (let column = 0; column < columns; column++) {\n      data[row].push({\n        x: xPos,\n        y: yPos,\n        height: height,\n        width: width\n      });\n      xPos += width;\n    }\n    xPos = 0;\n    yPos += height;\n  }\n  return data;\n}\n\nconst gridDatastore = gridData();\n\nlet grid = d3\n  .select(\"#grid\")\n  .append(\"svg\")\n  .attr(\"width\", `${window.innerWidth}px`)\n  .attr(\"height\", `${window.innerHeight}px`);\n\nlet row = grid\n  .selectAll(\".row\")\n  .data(gridDatastore)\n  .enter()\n  .append(\"g\")\n  .attr(\"class\", \"row\");\n\nlet column = row\n  .selectAll(\".cell\")\n  .data(d => d)\n  .enter()\n  .append(\"rect\")\n  .attr(\"class\", \"cell\")\n  .attr(\"x\", d => d.x)\n  .attr(\"y\", d => d.y)\n  .attr(\"height\", d => d.height)\n  .attr(\"width\", d => d.width)\n  .style(\"stroke\", \"black\")\n  .style(\"fill\", \"white\");\n\n\n\n"]}