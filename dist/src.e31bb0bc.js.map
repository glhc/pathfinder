{"version":3,"sources":["Node.js","index.js"],"names":["Node","xPos","yPos","up","down","rows","left","right","columns","peek","x","y","gridData","visited","data","width","window","innerWidth","height","console","table","row","push","column","occupied","gridDatastore","grid","d3","select","append","attr","innerHeight","selectAll","enter","d","style","Marker","Goal","Promise","resolve","then","reject","acc","i"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n/**\n * Creates a Start Node or the End Node\n * @constructor\n * @param xPos {Number} - The x position\n * @param yPos {Number} - The y position\n * @returns {Object} - A node.\n */\nexport default function Node(xPos = 10, yPos = 10) {\n  /** the x-position of the node */\n  this.xPos = xPos;\n  /** the y-position of the node */\n  this.yPos = yPos;\n\n  /**\n   * Move up.\n   * @returns {Number|Null} - y-position if successful, null otherwise\n   */\n  this.up = () => {\n    if (yPos - 1 < 0) {\n      return null;\n    } else {\n      this.yPos -= 1;\n      return this.yPos;\n    }\n  };\n\n  /**\n   * Move down.\n   * @returns {Number|Null} - y-position if successful, null otherwise\n   */\n  this.down = () => {\n    if (yPos + 1 < rows) {\n      return null;\n    } else {\n      this.yPos += 1;\n      return this.xPos;\n    }\n  };\n  /**\n   * Move left.\n   * @returns {Number|Null} - y-position if successful, null otherwise\n   */\n  this.left = () => {\n    if (xPos - 1 < 0) {\n      return null;\n    } else {\n      this.xPos -= 1;\n      return this.xPos;\n    }\n  };\n  /**\n   * Move right.\n   * @returns {Number|Null} - x-position if successful, null otherwise\n   */\n  this.right = () => {\n    if (xPos + 1 < columns) {\n      return null;\n    } else {\n      this.xPos += 1;\n      return this.xPos;\n    }\n  };\n\n  /**\n   * Searches an adjacent or diagonally adjacent square, marking as visited\n   * @param {number} x - the x-position to search\n   * @param {number} y - the y-position to search\n   * @returns {null} - returns null if the peek is invalid\n   */\n  this.peek = (x, y) => {\n    if (this.xPos - 1 < x  || x < this.xPos + 1) {\n      return null;\n    } else {\n      gridData[y][x].visited = true;\n    }\n  };\n};\n","\"use strict\";\n\nimport Node from './Node';\n\n\n/**\n * Generate a grid structure\n * @returns {Array} - The grid data\n */\nfunction gridData() {\n  let data = [];\n  let rows = 32;\n  let columns = 32;\n  let width = window.innerWidth / columns;\n  let height = width;\n\n  // TODO: get cell width to round up if theres leftover width\n\n  console.table({\n    width: width,\n    \"total width / cell width\": width / window.innerWidth\n  });\n\n  let xPos = 0;\n  let yPos = 0;\n\n  for (let row = 0; row < rows; row++) {\n    data.push([]);\n    for (let column = 0; column < columns; column++) {\n      data[row].push({\n        x: xPos,\n        y: yPos,\n        height: height,\n        width: width,\n        visited: false,\n        occupied: true\n      });\n      xPos += width;\n    }\n    xPos = 0;\n    yPos += height;\n  }\n  return data;\n}\n\nconst gridDatastore = gridData();\n\nlet grid = d3\n  .select(\"#grid\")\n  .append(\"svg\")\n  .attr(\"width\", `${window.innerWidth}px`)\n  .attr(\"height\", `${window.innerHeight}px`);\n\nlet row = grid\n  .selectAll(\".row\")\n  .data(gridDatastore)\n  .enter()\n  .append(\"g\")\n  .attr(\"class\", \"row\");\n\nlet column = row\n  .selectAll(\".cell\")\n  .data(d => d)\n  .enter()\n  .append(\"rect\")\n  .attr(\"class\", \"cell\")\n  .attr(\"x\", d => d.x)\n  .attr(\"y\", d => d.y)\n  .attr(\"height\", d => d.height)\n  .attr(\"width\", d => d.width)\n  .style(\"stroke\", \"#222\")\n  .style(\"fill\", \"#fff\");\n\nconst Marker = new Node();\nconst Goal = new Node();\n\nPromise.resolve()\n  .then((resolve, reject) => {\n    let acc = [];\n    for (let i = 0; i < 80; i++) {\n      Marker.down();\n      acc.push({xPos: Marker.xPos, yPos: Marker.yPos});\n    };\n  })\n  .then(data => console.table(data));\n\n"]}